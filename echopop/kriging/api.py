from typing import List, Union, Dict, Tuple, Optional
from pathlib import Path
import pandas as pd

# from mesh import ...
# from variogram import ...


class Kriging():
    """
    Class to perform kriging.

    Attributes
    ----------
    kriging_params : dict
        Dictionary containing all kriging parameters.
        # TODO: include those from initalization_config.yaml
        # A0: 6.25                              # base area of the grid cell
        # longitude_reference: -124.78338       # longitude reference for kriging mesh adjustment
        # longitude_offset: -124.78338          # longitudinal offset for kriging mesh adjustment
        # latitude_offset: 45.0                 # latitudinal offset for kriging mesh adjustment
        # TODO: also include those from Kriging_files/default_vario_krig_settings_2021_US&CAN.xlsx

    variogram_params : dict
        Dictionary containing all variogram parameters.
        # TODO: include those from Kriging_files/default_vario_krig_settings_2021_US&CAN.xlsx
    
    df_mesh : pd.DataFrame
        Dataframe containing the mesh points to perform kriging on.
        Must contain (`x`, `y`), (`longitude`, `latitude`), or (`lon`, `lat`)

    """


    def __init__(
        self,
        kriging_param_json: Union[str, Path],
        variogram_param_json: Union[str, Path],
        mesh_template: Union[str, Path],
        isobath_template: Optional[Union[str, Path]]=None
    ):
        # Kriging and variogram parameters from JSON files
        self.kriging_params: dict
        self.variogram_params: dict

        # Kriging mesh
        self.df_mesh_template: pd.DataFrame  # template
        self.df_mesh: pd.DataFrame = None  # final mesh used for kriging

        # Isobath if exists
        self.df_isobath: pd.DataFrame  # TODO: consider renaming this to df_xy_ref

        # TODO: maybe put content of preprocess_statistics() in a method
        # and run it here to update mesh and isobath dataframes

    def create_mesh(
        self,
        df_transect: pd.DataFrame,
        crop: bool,
        crop_method: str,
    ) -> pd.DataFrame:
        """
        Create mesh based on a mesh template and the transect lat/lon.
        """
        # Use self.df_mesh_template from init

        # Use other functions from mesh.py to create mesh

        # Update self.df_mesh

        pass

    # equivalent to the current transform_geometry()
    def latlon_to_xy(
        self,
        df_in: pd.DataFrame,
        delta_longitude: Optional[float] = None,
        delta_latitude: Optional[float] = None,
    ) -> Tuple[pd.DataFrame, float, float]:
        """
        Transform lat/lon to x/y with specific lat/lon reference.

        Parameters
        ----------
        df_in: pd.DataFrame
            DataFrame to be add the transformed x/y columns in
        delta_longitude: np.float64
            Total longitudinal distance (degrees) used for standardizing coordinates
        delta_latitude: np.float64
            Total longitudinal distance (degrees) used for standardizing coordinates

        """
        # TODO: The following parameters are in Kriging.kriging_params
        # longitude_reference
        # longitude_offset
        # latitude_offset
        # TODO: the current `reference_grid` is in self.df_isobath
        # NOTE: why does this need to be a geodataframe?

        # Update self.df_mesh

        pass


    # Similar to the current "krige" function
    def krige(df_in: pd.DataFrame, variables: List[str]) ->  pd.DataFrame:
        """
        Perform kringing on selected variables.

        Parameters
        ----------
        df_in : pd.DataFrame
            Dataframe containing at least the following columns:
            
            - (`x`, `y`), (`longitude`, `latitude`), or (`lon`, `lat`)
            - columns listed in `variables`

        variables : list of str
            Names of columns in `df_in` kriging will be performed on

        Returns
        -------
        Dataframe with kriged output, containing the following columns:

            - (`x`, `y`), (`longitude`, `latitude`), or (`lon`, `lat`)
            -  columns generated by kriging based on those listed in `variables`; 
            for example, if variable=["biomass", "NASC"], then the following columns will be generated:
            "biomass_area", "biomass_kriged_mean", "biomass_kriged_variance", 
            "biomass_sample_variance", "biomass_sample_cv",
            "NASC_area", "NASC_kriged_mean", "NASC_kriged_variance", 
            "NASC_sample_variance", "NASC_sample_cv"
            
        """
        # Use self.kriging_params and self.variogram_params to krige
        # Use self.df_mesh from create_mesh to krige

        # If only ("lon" and "lat") or ("longitude" "latitude") columns are found,
        # use self.latlon_to_xy() to convert them to ("x", "y")

        pass
